#ifndef OSGQOPENGLWINDOW_H
#define OSGQOPENGLWINDOW_H

#ifdef __APPLE__
#   define __glext_h_
#   include <QtGui/qopengl.h>
#   undef __glext_h_
#   include <QtGui/qopenglext.h>
#endif

#include <osgQOpenGL/Export>
#include <OpenThreads/ReadWriteMutex>

#ifdef WIN32
//#define __gl_h_
#include <osg/GL>
#endif

#include <QOpenGLWindow>
#include <QOpenGLFunctions>
#include <QReadWriteLock>

class OSGRenderer;
class QWidget;

namespace osgViewer
{
    class Viewer;
}

class OSGQOPENGL_EXPORT osgQOpenGLWindow : public QOpenGLWindow,
    protected QOpenGLFunctions
{
    Q_OBJECT

protected:
    // Owned and deleted through Qt parent
    OSGRenderer* m_renderer {nullptr};
    bool _osgWantsToRenderFrame{true};
    OpenThreads::ReadWriteMutex _osgMutex;
	bool _isFirstFrame {true};
    friend class OSGRenderer;

    QWidget* _widget = nullptr;

public:
    osgQOpenGLWindow(QWidget* parent = nullptr);
    virtual ~osgQOpenGLWindow();

    /** Get osgViewer View */
    osgViewer::Viewer* getOsgViewer();

    //! get mutex
    virtual OpenThreads::ReadWriteMutex* mutex();

    QWidget* asWidget()
    {
        return _widget;
    }

Q_SIGNALS:
    void initialized();

protected:

    //! call createRender. If overloaded, this method must send initialized signal at end
    virtual void initializeGL() override;

    virtual void resizeGL(int w, int h) override;

    //! lock scene graph and call osgViewer::frame()
    virtual void paintGL() override;

    //! called before creating renderer
    virtual void setDefaultDisplaySettings();

    virtual void keyPressEvent(QKeyEvent* event) override;
    virtual void keyReleaseEvent(QKeyEvent* event) override;
    virtual void mousePressEvent(QMouseEvent* event) override;
    virtual void mouseReleaseEvent(QMouseEvent* event) override;
    virtual void mouseDoubleClickEvent(QMouseEvent* event) override;
    virtual void mouseMoveEvent(QMouseEvent* event) override;
    virtual void wheelEvent(QWheelEvent* event) override;

    void createRenderer();
};

#endif // OSGQOPENGLWINDOW_H
